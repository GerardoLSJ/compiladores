void G(){

        if(c == '['){
            getChar();
        } else{
            error(_func_, c, "[");
        }
        
        Z();
        if(c == ']'){
            getChar();
        }else{
            error(_func_, c, "]");
        }
        return;
    }

    void Z(){

        if(c == 'b' || c == 'c' || c == 'e' || c == 'd'){
            
            D();
            
            Z();
            
            return;
        }else if(c == 'a' || c == 'h' || c == 'm' || c == 'p' || c == 'i'){
            
            Y();
            
            return;
        }else if(c == ']' ){
            return;
        }
        error(_func_, c, "identificador Haz Mientras Para Si Bul Cadena Entero Real");
        return;
    }

    void Y(){

        if(c == 'a' || c == 'h' || c == 'm' || c == 'p' || c == 'i'){
            
            S();
            
            X();
            
            return;
        }else{
                error(_func_, c, "identificador Haz Mientras Para Si");
            return;
        }
    }

    void X(){

        if(c == 'a' || c == 'h' || c == 'm' || c == 'p' || c == 'i'){
            
            Y();
            
            return;
        }else if(c == ']'){
            return;
        } else {
            error(_func_, c, "identificador Haz Mientras Para Si ]");
        }
    }

    void D(){

        if(c == 'd' || c == 'b' || c == 'c' || c == 'e'){
            //J();
            getChar();

            if(c == 'a'){
                getChar();
                
            }else{
                error(_func_, c, "identificador");
                
            }
            
            V();
            
            return;
        }else{
            error(_func_, c, "Bul Cadena Entero Real");
        }
        return;
    }
    
    void V(){

        if(c == ','){
            getChar();
            if(c == 'a'){
                getChar();
            }else{
                error(_func_, c, "identificador");
            }
            
            V();
            
            return;
        }else if(c == ';'){
            getChar();
            return;
        } else {
            error(_func_, c, ", ;");
            return;
        }    
    }

    void S(){


        if(c == 'a'){
            
            A();
            
            if(c == ';'){
                getChar();
                return;
            }else{
                error(_func_, c, ";");
                return;
            }
        }else if(c == 'h'){
            
            H();
            
            return;
        }else if(c == 'm'){
            
            M();
            
            return;
        }else if(c == 'p'){
            
            P();
            
            return;
        }else if(c == 'i'){
            
            I();
            
            return;
        }else{
            error(_func_, c, "identificador Haz Mientras Para Si");
            return;
        }
    }

    void A(){

        if(c == 'a'){
            getChar();  
        }else{
            error(_func_, c, "identificador");
        }
        if(c == '='){
            getChar();
        }else{
            error(_func_, c, "="); 
        }
    
        K();
    
        return;
    }

    void H(){

        if ( c == 'h') {
            getChar();
        } else {
            error(_func_, c, "Haz");
        }
        if(c == '['){ 
            getChar();
        }else{
            error(_func_, c, "[");
        }
        
        Y();
        
        if(c == ']'){
            getChar();
        } else {
            error(_func_, c, "]");
        }
        if(c == 'm'){
            getChar();   
        } else {
            error(_func_, c, "Mientras");
        }
        if(c == '('){
            getChar();
        }else {
            error(_func_, c, "(");
        }
        
        R();
        
        if(c == ')'){
            getChar();
        } else {
            error(_func_, c, ")");
        }
        if ( c == ';') {
            getChar();
            return;
        } else {
            error(_func_, c, ";");
            return;
        }
    }

    void M(){

        if (c == 'm'){
            getChar();
        }else{
            error(_func_, c, "Mientras");
        }
        if( c == '('){
            getChar();
        } else{
            error(_func_, c, "(");
        }
        
        R();   
        
        if(c == ')'){
            getChar();
        } else {
            error(_func_, c, ")");
        }
        if(c == '['){
            getChar();
        } else{
            error(_func_, c, "[");
        }
        
        Y();
        
        if(c == ']'){
            getChar();
            return;
        } else{
            error(_func_, c, "]");
            return;
        }
    }

    void P(){

        if (c == 'p') {
            getChar();
        } else {
            error(_func_, c, "Para");
        }
        
        if(c == '('){
            getChar();
        }
        else{
            error(_func_, c, "(");
        }
        
        A();
        
        if(c == ';'){
            getChar();
        }else{
            error(_func_, c, ";");
        }
        
        R();
        
        if(c == ';'){
            getChar();
        }else{
            error(_func_, c, ";");
        }
        
        A();
        
        if(c == ')'){
            getChar();
        }else{
            error(_func_, c, ")");    
        }
        if(c == '['){
            getChar();
        }else{
            error(_func_, c, "[");
        }
        
        Y();
        
        if(c == ']'){
            getChar();
            return;
        }
        error(_func_, c, "]");
        return;
    }

    void I(){

        if ( c == 'i') {
            getChar();
        }else{
            error(_func_, c, "Si");        
        }
        if ( c == '(') {
            getChar();
        }else{
            error(_func_, c, "(");
        }
        
        R();
        
        if (c == ')'){
            getChar();
        }else{
            error(_func_, c, ")");
        }
        if (c == '[') {
            getChar();
        }else{
            error(_func_, c, "[");
        }
        Y();
        if ( c == ']') {
            getChar();
        }else{
            error(_func_, c, "]");
        }
        
        N();
        
        return;
    }

    void N() {

        if ( c == 'a' || c == 'h' || c == 'm' || c == 'p' || c == 'i'|| c == ']') {
            return;
        } else {
            if ( c == 'o'){
                getChar();
            }else{
                error(_func_, c, "]");
            }
            if ( c == '['){
                getChar();
            }else{
                error(_func_, c, "]");
            }
            
            Y();
            
            if (c == ']'){
                getChar();
                return;
            }else{
                error(_func_, c, "]");
                return;
            }
        } 
    }

    void K() {

        if ( c == 'a' || c == '(' || c == 'n' || c == 'r') {
            
            E();
            
            return;
        }else{
            if ( c == 's' || c == 't' || c == 'f'){
                getChar();
                return;
            }
        }   
        error(_func_, c, "{identificador ( constante_entera constante_real}");
        return;
    }

    void R() {

        if ( c == '(' || c == 'a'|| c == 'n' || c == 'r') {
            
            E();
            
            Q();
            
            return;
        }
        error(_func_, c, "{( identificador constante_entera constante_real}");
        return;
    }

    void Q() {

        if ( c == '!' || c == 'q'|| c == '<' || c == 'l'|| c == '>' || c == 'g') {
            //O();
            getChar();
            
            E();
            
            return;
        } else if ( c == ')' || c == ';') {
            return;
        } else {
            error(_func_, c, "operador_relacional");
            return;
        }
    }

    void E() {

        if ( c == 'a' || c == '(' || c == 'n' || c == 'r') {
            
            T();
            
            EP();
            
            return;
        } 
        error(_func_, c, "{identificador ( constante_entera constante_real}");
        return;
    }

    void EP() {

        if ( c == ')' || c == ';' || c == '!' || c == 'q'|| c == '<' || c == 'l'|| c == '>' || c == 'g') {
            return;
        } else {
            if ( c == '+' || c == '-') {
                getChar();
                
                T();
                
                EP();
            
            }else {
                error(_func_, c, "{) ; operador_relacional}");
            }
        } 
    }

    void T() {

        if ( c == '(' || c == 'n' || c == 'r'|| c == 'a') {
            
            F();
            
            TP();
            
            return;
        } 
        error(_func_, c, "{( ; constante_entera constante_real}");
        return;
    }

    void TP() {

        if ( c == ')' || c == ';' || c == '+' || c == '-' ||
        c == '!' || c == 'q'|| c == '<' || c == 'l'|| c == '>' || c == 'g') {
            return;
        } else {
            if (c == '*' || c == '/' || c == '%') {
                getChar();
                
                F();
                
                TP();

                return;
            } else {
                error(_func_, c, "{) ; operador_relacional operador_aritmetico}");
                return;
            }
        }  
    }

    void F() {

        if (c == 'a' || c == 'n' || c == 'r') {
            getChar();
            return;
        } else {
            if ( c == '(' ) {
                getChar();
            } else {
                error(_func_, c, "(");
            }

            E();

            if ( c == ')') {
                getChar();
                return;
            } else {
                error(_func_, c, ")");
                return;
            }    
        }  
        error(_func_, c, "{identificador constante_entera constante_real Cierto Falso}");
        return;
    }